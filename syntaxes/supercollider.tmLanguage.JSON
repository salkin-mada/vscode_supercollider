{
	"fileTypes": ["sc", "scd"],
	"foldingStartMarker": "{|\/*",
	"foldingStopMarker": "}|*\/",
	"keyEquivalent": "^~S",
	"name": "supercollider",
	"patterns": [
		{
			"include": "#whitespace"
		},
		{
			"include": "#keyword"
		},
		{
			"include": "#built-in"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#number radix-float"
		},
		{
			"include": "#number scale-degree"
		},
		{
			"include": "#number float"
		},
		{
			"include": "#number hex-int"
		},
		{
			"include": "#symbol symbol-arg"
		},
		{
			"include": "#text name"
		},
		{
			"include": "#class"
		},
		{
			"include": "#primitive"
		},
		{
			"include": "#symbol"
		},
		{
			"include": "#char"
		},
		{
			"include": "#env-var"
		},
		{
			"include": "comment single-line-comment"
		},
		{
			"include": "string"
		},
		{
			"include": "text punctuation"
		},
		{
			"include": "comment multi-line-comment"
		},
		{
			"include": "text operator"
		}
	],
	"repository": {
		"whitespace": {
			"patterns": [
				{
					"match": "(\\s+)"
				}
			]
		},
		"keyword": {
			"patterns": [
				{
					"name": "keyword.control.supercollider",
					"match": "\\b(?:arg|classvar|const|super|this|var)\\s"
				}
			]
		},
		"built-in": {
			"patterns": [
				{
					"name": "variable.language.supercollider",
					"match": "\\b(?:false|inf|nil|true|thisFunction|thisFunctionDef|thisMethod|thisProcess|thisThread|currentEnvironment|topEnvironment)\\s"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"name": "variable.language.supercollider",
					"match": "\\b(?:linlin|loglin|linlog)"
				},
				{
					"name": "variable.language.supercollider",
					"match": "\\b(?:min|max|round|trunc|atan2|hypot|hypotApx|ring1|ring2|ring3|ring4|sumsqr|difsqr|sqrsum|sqrdif|absdif|thresh|amclip|scaleneg|clip2|wrap2|fold2|excess)\\s"
				},
				{
					"name": "variable.language.supercollider",
					"match": "\\b(?:neg|reciprocal|abs|floor|ceil|frac|sign|squared|cubed|sqrt|exp|midicps|cpsmidi|midiratio|ratiomidi|dbamp|ampdb|octcps|cpsoct|log|log2|log10|sin|cos|tan|asin|acos|atan|sinh|cosh|tanh|distort|softclip|isPositive|isNegative|isStrictlyPositive)\\s"
				},
				{
					"name": "variable.language.supercollider",
					"match": "\\b(?:new|yield|break|rescue|return|case|begin|do|forBy|loop|if|while|else)\\s"
				}
			]
		},
		"number radix-float": {
			"patterns": [
				{
					"name": "constant.numeric.supercollider",
					"match": "\\b\\d+r[0-9a-zA-Z]*(\\.[0-9A-Z]*)?"
				}
			]
		},
		"number scale-degree": {
			"patterns": [
				{
					"name": "constant.numeric.supercollider",
					"match": "\\b((\\d+(\\.\\d+)?([eE][-+]?\\d+)?(pi)?)|pi)\\b"
				}
			]
		},
		"number hex-int": {
			"patterns": [
				{
					"name": "constant.numeric.supercollider",
					"match": "\\b0x(\\d|[a-f]|[A-F])+"
				}
			]
		},
		"symbol symbol-arg": {
			"patterns": [
				{
					"name": "constant.character.escape.supercollider",
					"match": "\b[A-Za-z_]\\w*\\:"
				}

			]
		},
		"text name": {
			"patterns": [
				{
					"name": "text.supercollider",
					"match": "[a-z]\\w*"
				}
			]
		},
		"class": {
			"patterns": [
				{	
					"name": "entity.name.class.supercollider",
					"match": "\\b([A-Z]\\w*)"	
				}
			]
		},
		"primitive": {
			"patterns": [
				{	
					"name": "entity.name.class.supercollider",
					"match": "\\b_\\w+"	
				}
			]
		},
		"symbol": {
			"patterns": [
				{
					"name": "constant.character.escape.supercollider",
					"match": "(\\s*\\\\\\w*\\s)"
				}
			]
		},
		"char": {
			"patterns": [
				{
					"name": "constant.character.escape.supercollider",
					"match": "^\\$\\?."
				}
			]
		},
		"env-var": {
			"patterns": [
				{
					"name": "constant.character.escape.supercollider",
					"match": "^~\\w+"
				}
			]
		},
		"comment single-line-comment": {
			"patterns": [
				{
					"name": "comment.single.supercollider",
					"match": "^\\/\\/[^\\r\\n]*"
				}
			]
		},
		"string": {
			"patterns": [
				{
					"name": "string.quoted.single.supercollider",
					"match": "\\\"(?:[^\\]|\\.)*?(?:\"|$)"
				}
			]
		},
		"text punctuation": {
			"patterns": [
				{
					"name": "string.quoted.single.supercollider",
					"match": "^[-.,;#()\\[\\]{}]"
				}
			]
		},
		"comment multi-line-comment": {
			"patterns": [
				{
					"name": "comment.multiline.supercollider",
					"begin": "(/\\*)",
					"end": "\\*/"
				}
			]
		},
		"text operator": {
			"patterns": [
				{
					"name": "string.quoted.single.supercollider",
					"match": "^[+\\-*/&\\|\\^%<>=!?]+"
				}
			]
		}
	},
	"scopeName": "source.supercollider"
}